package org.drools.execution;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.DisplayName;
import org.drools.storage.DefinitionStorage;
import java.util.List;

/**
 * Test to isolate and reproduce the Number conversion NPE that occurred during workflow execution.
 */
public class NumberConversionNPETest {

    @Test
    @DisplayName("Reproduce Number conversion NPE from workflow execution")
    public void reproduceNumberConversionNPE() {
        try {
            // Recreate the exact scenario from the workflow that caused the NPE
            System.out.println("=== Reproducing Number Conversion NPE ===");
            
            // Set up the exact DRL that was generated by the workflow
            String drlContent = """
                declare User
                    age : Number
                end
                
                rule "Check if User is Adult"
                when
                    $user : User(age >= 18)
                then
                    System.out.println("User is adult: " + $user.getAge());
                end
                """;
            
            // Use the exact JSON facts that were processed
            String jsonFacts = """
                [{"_type":"User", "age":18}]
                """;
            
            System.out.println("DRL Content:");
            System.out.println(drlContent);
            System.out.println("\nJSON Facts:");
            System.out.println(jsonFacts);
            
            // Execute exactly like the workflow did
            DRLRunnerResult result = DRLPopulatorRunner.runDRLWithJsonFacts(drlContent, jsonFacts, 0);
            
            System.out.println("✅ Success: " + result.objects() + ", fired rules: " + result.firedRules());
            
        } catch (Exception e) {
            System.out.println("❌ NPE Reproduced: " + e.getMessage());
            System.out.println("Exception type: " + e.getClass().getName());
            e.printStackTrace();
        }
    }
    
    @Test
    @DisplayName("Test different Number types to isolate the issue")
    public void testDifferentNumberTypes() {
        System.out.println("=== Testing Different Number Types ===");
        
        // Test with int field instead of Number
        testNumberType("int", "18");
        
        // Test with Number field and integer value
        testNumberType("Number", "18");
        
        // Test with Number field and double value
        testNumberType("Number", "18.0");
    }
    
    private void testNumberType(String fieldType, String ageValue) {
        try {
            System.out.println("\n--- Testing " + fieldType + " with value " + ageValue + " ---");
            
            String drlContent = """
                declare User
                    age : """ + fieldType + """
                end
                
                rule "Check if User is Adult"
                when
                    $user : User(age >= 18)
                then
                    System.out.println("User is adult with age: " + $user.getAge());
                end
                """;
            
            String jsonFacts = "[{\"_type\":\"User\", \"age\":" + ageValue + "}]";
            
            System.out.println("DRL: " + fieldType + " field");
            System.out.println("JSON: " + jsonFacts);
            
            DRLRunnerResult result = DRLPopulatorRunner.runDRLWithJsonFacts(drlContent, jsonFacts, 0);
            System.out.println("✅ Success with " + fieldType + ": " + result.objects().size() + " facts, fired rules: " + result.firedRules());
            
        } catch (Exception e) {
            System.out.println("❌ Failed with " + fieldType + ": " + e.getMessage());
            if (e.getMessage().contains("Number") || e.getMessage().contains("intValue")) {
                System.out.println("  >>> This is the NPE we're looking for!");
                e.printStackTrace();
            }
        }
    }
    
    @Test
    @DisplayName("Test JSON to Java object creation with Number fields")
    public void testJsonToJavaWithNumbers() {
        System.out.println("=== Testing JSON to Java Object Creation ===");
        
        try {
            // Test the exact DynamicJsonToJavaFactory path that caused the issue
            DefinitionStorage storage = new DefinitionStorage();
            
            String drlDeclare = """
                declare User
                    age : Number
                end
                """;
            
            storage.addDefinition("User", "declare", drlDeclare);
            DynamicJsonToJavaFactory factory = new DynamicJsonToJavaFactory(storage);
            
            // Test different JSON number formats
            testJsonNumberFormat(factory, "{\"age\": 18}", "integer");
            testJsonNumberFormat(factory, "{\"age\": 18.0}", "double");
            testJsonNumberFormat(factory, "{\"age\": \"18\"}", "string");
            
        } catch (Exception e) {
            System.out.println("❌ Factory creation failed: " + e.getMessage());
            e.printStackTrace();
        }
    }
    
    private void testJsonNumberFormat(DynamicJsonToJavaFactory factory, String json, String format) {
        try {
            System.out.println("\n--- Testing " + format + " format: " + json + " ---");
            
            List<Object> objects = factory.createObjectsFromJson(json, "User");
            System.out.println("✅ Created object: " + objects.get(0));
            
            // Try to access the age field
            Object user = objects.get(0);
            System.out.println("User object type: " + user.getClass().getName());
            
            // Use reflection to get the age value and see what type it is
            try {
                java.lang.reflect.Method getAge = user.getClass().getMethod("getAge");
                Object ageValue = getAge.invoke(user);
                System.out.println("Age value: " + ageValue);
                System.out.println("Age value type: " + (ageValue != null ? ageValue.getClass().getName() : "null"));
                
                if (ageValue instanceof Number) {
                    Number num = (Number) ageValue;
                    System.out.println("Number.intValue(): " + num.intValue());
                }
                
            } catch (Exception reflectionError) {
                System.out.println("❌ Reflection error: " + reflectionError.getMessage());
                reflectionError.printStackTrace();
            }
            
        } catch (Exception e) {
            System.out.println("❌ Failed with " + format + ": " + e.getMessage());
            e.printStackTrace();
        }
    }
}